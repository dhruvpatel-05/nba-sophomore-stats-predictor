# -*- coding: utf-8 -*-
"""bruin_sports_note.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12eJroWLwO1lQfs13DXyrRJ-nRXjUNj7B
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import requests
pd.set_option('display.max_columns', None)
import time

test_url = 'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season=2018-19&SeasonType=Regular%20Season&StatCategory=PTS'

r = requests.get(url=test_url).json()

table_head = r['resultSet']['headers']

pd.DataFrame(r['resultSet']['rowSet'], columns = table_head)

temp_df1 = pd.DataFrame(r['resultSet']['rowSet'], columns = table_head)
temp_df2 = pd.DataFrame({'Year':['2015-16' for i in range(len(temp_df1))],
                        'Season_type':['Regular%20Season' for i in range(len(temp_df1))]})
temp_df3 = pd.concat([temp_df2, temp_df1], axis = 1)
temp_df3

del temp_df1, temp_df2, temp_df3

df_cols = ['Year','Season_type'] + table_head

pd.DataFrame(columns=df_cols)

df = pd.DataFrame(columns=df_cols)
pd.DataFrame(columns=df_cols)
years = ['2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24']
begin_loop = time.time()

for y in years:
    # Define the API URL for regular season stats
    api_url = f'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season={y}&SeasonType=Regular%20Season&StatCategory=PTS'

    # Request data from the API
    r = requests.get(url=api_url).json()

    # Create dataframes from the API response
    temp_df1 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_head)
    temp_df2 = pd.DataFrame({'Year': [y for _ in range(len(temp_df1))],
                             'Season_type': ['Regular Season' for _ in range(len(temp_df1))]})

    # Concatenate the dataframes
    temp_df3 = pd.concat([temp_df2, temp_df1], axis=1)
    df = pd.concat([df, temp_df3], axis=0)

    print(f'Finished scraping data for the {y} Regular Season.')

    # Wait for a random interval to avoid being blocked
    lag = np.random.uniform(low=5, high=60)
    print(f'...waiting {round(lag, 1)} seconds')
    time.sleep(lag)

# Print the total run time and save the dataframe to an Excel file
print(f'Process completed! Total run time: {round((time.time() - begin_loop) / 60, 2)} minutes')
df.to_excel('bruinsports_data_analysis.xlsx', index=False)

df

file_path = 'bruinsports_data_analysis.xlsx'
df = pd.read_excel(file_path)

df.head()

#NEED TO UPDATE
#rookies_2018_19 = ["Luka Doncic", "Trae Young", "Collin Sexton", "Deandre Ayton", "Marvin Bagley III", "Jaren Jackson Jr.", "Kevin Knox II", "Allonzo Trier", "Shai Gilgeous-Alexander", "Wendell Carter Jr.", "Kevin Huerter", "Jalen Brunson", "Landry Shamet", "Rodions Kurucs", "Mikal Bridges", "Frank Jackson", "Josh Okogie", "Miles Bridges", "Mitchell Robinson", "Harry Giles III", "Kenrich Williams", "Omari Spellman", "Aaron Holiday", "Elie Okobo", "Bruce Brown"]
#rookies_2019_20 = ["Zion Williamson", "Ja Morant", "Kendrick Nunn", "RJ Barrett", "Eric Paschall", "Rui Hachimura", "Tyler Herro", "Coby White", "De'Andre Hunter", "Darius Garland", "P.J. Washington", "Brandon Clarke", "Cam Reddish", "Kevin Porter Jr.", "Michael Porter Jr.", "Jarrett Culver", "Darius Bazley", "Terence Davis", "Matisse Thybulle", "Goga Bitadze", "Grant Williams", "Jordan Poole", "Jaxson Hayes", "Luguentz Dort", "Sekou Doumbouya"]
#rookies_2020_21 = ["Anthony Edwards", "LaMelo Ball", "Tyrese Haliburton", "Saddiq Bey", "Immanuel Quickley", "Jae'Sean Tate", "Theo Maledon", "Isaac Okoro", "Patrick Williams", "Desmond Bane", "Tyrese Maxey", "Isaiah Stewart", "Payton Pritchard", "Facundo Campazzo"]
#rookies_2021_22 = ["Cade Cunningham", "Jalen Green", "Scottie Barnes", "Franz Wagner", "Evan Mobley", "Chris Duarte", "Josh Giddey", "Jalen Suggs", "Davion Mitchell", "Tre Mann", "Bones Hyland", "Alperen Sengun", "Herbert Jones", "Jonathan Kuminga", "Ayo Dosunmu", "Cam Thomas", "Aaron Wiggins", "Corey Kispert", "Ziaire Williams", "Josh Christopher"]
#rookies_2022_23 = ["Paolo Banchero", "Bennedict Mathurin", "Jaden Ivey", "Jalen Williams", "Jabari Smith Jr.", "Keegan Murray", "Jeremy Sochan", "Malaki Branham", "Shaedon Sharpe", "Andrew Nembhard", "Tari Eason", "Walker Kessler", "Jalen Duren", "AJ Griffin", "Christian Braun"]
#rookies_2023_24 = ["Victor Wembanyama", "Brandon Miller", "Chet Holmgren", "Keyonte George", "Jaime Jaquez Jr.", "Scoot Henderson", "Amen Thompson", "Ausar Thompson", "Dereck Lively II", "Bilal Coulibaly", "Marcus Sasser", "Trayce Jackson-Davis", "Brandin Podziemski"]

#new data uses 30 game requirement for rookie
#rookies_2018_19 = ["Mikal Bridges", "Shai Gilgeous-Alexander", "Collin Sexton", "Trae Young", "Miles Bridges", "Landry Shamet", "Kevin Huerter", "Kevin Knox", "Bruce Brown", "Josh Okogie", "Jalen Brunson", "Luka Dončić", "Deandre Ayton", "Mitchell Robinson", "Allonzo Trier", "Rodions Kurucs", "Marvin Bagley III", "Frank Jackson", "Harry Giles", "Jaren Jackson Jr.", "Elie Okobo", "Troy Brown Jr.", "Gary Clark", "Hamidou Diallo", "Aaron Holiday", "De'Anthony Melton", "Mo Bamba", "Devonte' Graham", "Omari Spellman", "Kenrich Williams", "Jonah Bolden", "Wendell Carter Jr.", "Chandler Hutchison", "Moritz Wagner", "Ryan Broekhoff", "Svi Mykhailiuk", "Isaiah Briscoe", "Jevon Carter", "Grayson Allen", "Brad Wanamaker", "Jaylen Adams", "Jerome Robinson", "Deonte Burton", "Robert Williams", "Keita Bates-Diop", "Jacob Evans"]
#rookies_2019_20 = ["Grant Williams", "Ja Morant", "Kendrick Nunn", "Matisse Thybulle", "Coby White", "Jaxson Hayes", "Jarrett Culver", "De'Andre Hunter", "Darius Bazley", "Nicolò Melli", "Eric Paschall", "Darius Garland", "Brandon Clarke", "Cam Reddish", "P.J. Washington", "Cameron Johnson", "Jordan Poole", "RJ Barrett", "Bruno Fernando", "Tyler Herro", "Michael Porter Jr.", "Goga Bitadze", "Kevin Porter Jr.", "Javonte Green", "Rui Hachimura", "Nassir Little", "Cody Martin", "Nickeil Alexander-Walker", "Ky Bowman", "Marko Gudurić", "Chris Silva", "Daniel Gafford", "Terance Mann", "Matt Thomas", "Sekou Doumbouya", "Carsen Edwards", "Luguentz Dort", "Justin James", "Chris Clemons", "Admiral Schofield", "Romeo Langford", "Ty Jerome", "Kelan Martin", "Wenyen Gabriel", "Jordan McLaughlin", "Naz Reid", "Terence Davis"]
#rookies_2020_21 = ["Anthony Edwards", "Patrick Williams", "Saddiq Bey", "Jae'Sean Tate", "Desmond Bane", "Isaiah Stewart", "Isaac Okoro", "Payton Pritchard", "Facundo Campazzo", "Théo Maledon", "Immanuel Quickley", "Jaden McDaniels", "Obi Toppin", "Devin Vassell", "Precious Achiuwa", "Tyrese Maxey", "Xavier Tillman Sr.", "Tyrese Haliburton", "Deni Avdija", "Kira Lewis Jr.", "LaMelo Ball", "R.J. Hampton", "Onyeka Okongwu", "Saben Lee", "Cole Anthony", "Malachi Flynn", "Aaron Nesmith", "KJ Martin", "Chuma Okeke", "Aleksej Pokusevski", "Zeke Nnaji", "Isaiah Joe", "Lamar Stevens", "Josh Green", "James Wiseman", "Markus Howard", "Tre Jones", "Nathan Knight", "Skylar Mays", "Mason Jones", "Naji Marshall", "Brodric Thomas", "Dylan Windler", "CJ Elleby", "Trent Forrest", "Nico Mannion", "Sam Merrill", "Jordan Nwora", "Daniel Oturu"]
#rookies_2021_22 = ["Franz Wagner", "Herbert Jones", "Ayo Dosunmu", "Corey Kispert", "Davion Mitchell", "Scottie Barnes", "Josh Christopher", "Alperen Sengun", "Jonathan Kuminga", "Bones Hyland", "Evan Mobley", "Jalen Green", "Cam Thomas", "Dalano Banton", "Cade Cunningham", "Trey Murphy III", "Ziaire Williams", "Austin Reaves", "Tre Mann", "Omer Yurtseven", "Chris Duarte", "Jose Alvarado", "Josh Giddey", "Jock Landale", "Moses Moody", "Brandon Boston Jr.", "Joshua Primo", "Aaron Wiggins", "Jeremiah Robinson-Earl", "Greg Brown III", "Kessler Edwards", "Jalen Suggs", "Duane Washington Jr.", "Trendon Watford", "Quentin Grimes", "Ish Wainright", "Jared Butler", "Sandro Mamukelashvili", "Jericho Sims", "Miles McBride", "Keon Johnson", "Justin Champagnie", "Isaiah Jackson", "Leandro Bolmaro", "Terry Taylor", "JT Thor", "Santi Aldama", "Luka Garza", "Day'Ron Sharpe", "Keifer Sykes", "James Bouknight", "Vit Krejci"]
#rookies_2022_23 = ["Tari Eason", "Keegan Murray", "Shaedon Sharpe", "Jabari Smith Jr.", "Bennedict Mathurin", "Christian Braun", "Andrew Nembhard", "Jalen Williams", "Jaden Ivey", "Walker Kessler", "Paolo Banchero", "AJ Griffin", "David Roddy", "Jalen Duren", "Malaki Branham", "Ochai Agbaji", "Dyson Daniels", "Christian Koloko", "Jeremy Sochan", "Jabari Walker", "MarJon Beauchamp", "Simone Fontecchio", "Caleb Houstan", "Jaylin Williams", "Jaden Hardy", "Bryce McGowens", "Mark Williams", "Max Christie", "Ousmane Dieng", "Dalen Terry", "Blake Wesley", "Kennedy Chandler", "A.J. Green", "Jake LaRavia", "Kevon Harris", "Patrick Baldwin Jr.", "Orlando Robinson", "TyTy Washington Jr."]
#rookies_2023_24 = ["Chet Holmgren", "Cason Wallace", "Keyonte George", "Jaime Jaquez Jr.", "Brandon Miller", "Brandin Podziemski", "Marcus Sasser", "Victor Wembanyama", "Toumani Camara", "Anthony Black", "Trayce Jackson-Davis", "Duop Reath", "Jordan Hawkins", "Bilal Coulibaly", "Ausar Thompson", "Scoot Henderson", "Kris Murray", "Amen Thompson", "Gradey Dick", "Vasilije Micić", "Andre Jackson Jr.", "Ben Sheppard", "Dereck Lively II", "Craig Porter Jr.", "Nick Smith Jr.", "Julian Strawther", "GG Jackson II", "Cam Whitmore", "Kobe Brown", "Jalen Wilson", "Sasha Vezenkov", "Taylor Hendricks", "Julian Phillips", "Olivier-Maxence Prosper", "Rayan Rupert", "Maxwell Lewis", "Jarace Walker", "Ricky Council IV", "Brice Sensabaugh", "Colby Jones"]

#new data uses 45 game requirement for rookie
rookies_2018_19 = ["Mikal Bridges", "Shai Gilgeous-Alexander", "Collin Sexton", "Trae Young", "Miles Bridges", "Landry Shamet", "Kevin Huerter", "Kevin Knox", "Bruce Brown", "Josh Okogie", "Jalen Brunson", "Luka Doncic", "Deandre Ayton", "Mitchell Robinson", "Allonzo Trier", "Rodions Kurucs", "Marvin Bagley III", "Frank Jackson", "Harry Giles", "Jaren Jackson Jr.", "Elie Okobo", "Troy Brown Jr.", "Gary Clark", "Hamidou Diallo", "Aaron Holiday", "De'Anthony Melton", "Mo Bamba", "Devonte' Graham", "Omari Spellman", "Kenrich Williams"]
rookies_2019_20 = ["Grant Williams", "Ja Morant", "Kendrick Nunn", "Matisse Thybulle", "Coby White", "Jaxson Hayes", "Jarrett Culver", "De'Andre Hunter", "Darius Bazley", "Nicolò Melli", "Eric Paschall", "Darius Garland", "Brandon Clarke", "Cam Reddish", "P.J. Washington", "Cameron Johnson", "Jordan Poole", "RJ Barrett", "Bruno Fernando", "Tyler Herro", "Michael Porter Jr.", "Goga Bitadze", "Kevin Porter Jr.", "Javonte Green", "Rui Hachimura", "Nassir Little", "Cody Martin", "Nickeil Alexander-Walker", "Ky Bowman"]
rookies_2020_21 = ["Anthony Edwards", "Patrick Williams", "Saddiq Bey", "Jae'Sean Tate", "Desmond Bane", "Isaiah Stewart", "Isaac Okoro", "Payton Pritchard", "Facundo Campazzo", "Théo Maledon", "Immanuel Quickley", "Jaden McDaniels", "Obi Toppin", "Devin Vassell", "Precious Achiuwa", "Tyrese Maxey", "Xavier Tillman Sr.", "Tyrese Haliburton", "Deni Avdija", "Kira Lewis Jr.", "LaMelo Ball", "R.J. Hampton", "Onyeka Okongwu", "Saben Lee", "Cole Anthony", "Malachi Flynn", "Aaron Nesmith", "KJ Martin", "Chuma Okeke", "Aleksej Pokusevski"]
rookies_2021_22 = ["Franz Wagner", "Herbert Jones", "Ayo Dosunmu", "Corey Kispert", "Davion Mitchell", "Scottie Barnes", "Josh Christopher", "Alperen Sengun", "Jonathan Kuminga", "Bones Hyland", "Evan Mobley", "Jalen Green", "Cam Thomas", "Dalano Banton", "Cade Cunningham", "Trey Murphy III", "Ziaire Williams", "Austin Reaves", "Tre Mann", "Omer Yurtseven", "Chris Duarte", "Jose Alvarado", "Josh Giddey", "Jock Landale", "Moses Moody", "Brandon Boston Jr.", "Joshua Primo", "Aaron Wiggins", "Jeremiah Robinson-Earl", "Greg Brown III", "Kessler Edwards", "Jalen Suggs", "Duane Washington Jr.", "Trendon Watford", "Quentin Grimes", "Ish Wainright"]
rookies_2022_23 = ["Tari Eason", "Keegan Murray", "Shaedon Sharpe", "Jabari Smith Jr.", "Bennedict Mathurin", "Christian Braun", "Andrew Nembhard", "Jalen Williams", "Jaden Ivey", "Walker Kessler", "Paolo Banchero", "AJ Griffin", "David Roddy", "Jalen Duren", "Malaki Branham", "Ochai Agbaji", "Dyson Daniels", "Christian Koloko", "Jeremy Sochan", "Jabari Walker", "MarJon Beauchamp", "Simone Fontecchio", "Caleb Houstan", "Jaylin Williams", "Jaden Hardy", "Bryce McGowens"]
rookies_2023_24 = ["Chet Holmgren", "Cason Wallace", "Keyonte George", "Jaime Jaquez Jr.", "Brandon Miller", "Brandin Podziemski", "Marcus Sasser", "Victor Wembanyama", "Toumani Camara", "Anthony Black", "Trayce Jackson-Davis", "Duop Reath", "Jordan Hawkins", "Bilal Coulibaly", "Ausar Thompson", "Scoot Henderson", "Kris Murray", "Amen Thompson", "Gradey Dick", "Vasilije Micić", "Andre Jackson Jr.", "Ben Sheppard", "Dereck Lively II", "Craig Porter Jr.", "Nick Smith Jr.", "Julian Strawther", "GG Jackson II", "Cam Whitmore"]


# Combine all rookie lists
all_rookies = rookies_2018_19 + rookies_2019_20 + rookies_2020_21 + rookies_2021_22 + rookies_2022_23 + rookies_2023_24

# Assuming df is your existing DataFrame with player data
# Filter data to include only rows where the player's name is in the list of rookies
rookies_data = df[df['PLAYER'].isin(all_rookies)]

# Drop duplicate rows based on the 'PLAYER' column
unique_rookies_data = rookies_data.drop_duplicates(subset=['PLAYER'])

# Ensure unique_rookies_data is a DataFrame and save it to an Excel file
unique_rookies_data.to_excel('rooks.xlsx', index=False)

unique_rookies_data

# Exclude the 2023-24 rookies
unique_rookies_data_excl_2023_24 = unique_rookies_data[unique_rookies_data['Year'] != '2023-24'].copy()

# Calculate the sophomore year for the remaining rookies
unique_rookies_data_excl_2023_24.loc[:, 'Sophomore Year'] = unique_rookies_data_excl_2023_24['Year'].apply(lambda x: str(int(x.split('-')[0]) + 1) + '-' + str(int(x.split('-')[1]) + 1))

# Merge with the bruinsports data to get the sophomore year data
sophomore_years = unique_rookies_data_excl_2023_24[['PLAYER', 'Sophomore Year']].copy()
sophomore_years = sophomore_years.rename(columns={'Sophomore Year': 'Year'})
sophomore_data = pd.merge(sophomore_years, df, on=['PLAYER', 'Year'], how='inner')

# Check if we got all the expected players
missing_players = set(unique_rookies_data_excl_2023_24['PLAYER']) - set(sophomore_data['PLAYER'])

missing_players

sophomore_data

sophomore_years

# prompt: generate a list for rookie ppg for each player

rookie_ppg = unique_rookies_data.groupby('PLAYER')['PTS'].mean().reset_index()
rookie_ppg

sophomore_ppg = sophomore_data.groupby('PLAYER')['PTS'].mean().reset_index()
sophomore_ppg

unique_rookies_data_excl_2023_24

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
unique_names = sophomore_ppg['PLAYER'].unique()

# Trim rookies_ppg to contain only the names that are in sophomores_ppg
trimmed_rookies_ppg = rookie_ppg[rookie_ppg['PLAYER'].isin(unique_names)]
# Assuming rookie_ppg and sophomore_ppg are pandas DataFrame objects
rookie_ppg_values = trimmed_rookies_ppg['PTS'].tolist()
sophomore_ppg_values = sophomore_ppg['PTS'].tolist()

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_ppg_values, sophomore_ppg_values, color='blue')



# Set equal scale for both axes
plt.xlim(0, 25)
plt.ylim(0, 35)

# Add labels and title
plt.xlabel('Rookie PPG', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore PPG', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore PPG', fontweight ='bold', fontsize = 18)


missing_players = set(sophomore_ppg['PLAYER']) - set(rookie_ppg['PLAYER'])

# Add a trend line
z = np.polyfit(rookie_ppg_values, sophomore_ppg_values, 1)
p = np.poly1d(z)
plt.plot(rookie_ppg_values, p(rookie_ppg_values), color='red', linestyle='-')
#plt.plot(rookie_ppg_values, rookie_ppg_values, color='green', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppg_values)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppg_values)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPG:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppg_values)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppg_values)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPG:", average2)

print("Average percentage increase PPG:", 100 * (average2 - average1)/average1)

#EFF is more comprehensive than PPG (it takes many other stats into account rather than just points)

rookie_eff = unique_rookies_data.groupby('PLAYER')['EFF'].mean().reset_index()
sophomore_eff = sophomore_data.groupby('PLAYER')['EFF'].mean().reset_index()

# Trim rookies_eff to contain only the names that are in sophomores_eff
trimmed_rookies_eff = rookie_eff[rookie_eff['PLAYER'].isin(unique_names)]
# Assuming rookie_eff and sophomore_eff are pandas DataFrame objects
rookie_eff_values = trimmed_rookies_eff['EFF'].tolist()
sophomore_eff_values = sophomore_eff['EFF'].tolist()

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_eff_values, sophomore_eff_values, color='blue')



# Set equal scale for both axes
plt.xlim(0, 25)
plt.ylim(0, 35)

# Add labels and title
plt.xlabel('Rookie EFF', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore EFF', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore EFF', fontweight ='bold', fontsize = 18)



# Add a trend line
z = np.polyfit(rookie_eff_values, sophomore_eff_values, 1)
p = np.poly1d(z)
plt.plot(rookie_eff_values, p(rookie_eff_values), color='red', linestyle='-')
#plt.plot(rookie_eff_values, rookie_eff_values, color='green', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff_values)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff_values)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff_values)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff_values)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF:", average2)

print("Average percentage increase EFF:", 100 * (average2 - average1)/average1)

rookie_eff = unique_rookies_data.groupby('PLAYER')['EFF'].mean().reset_index()
rookie_mp = unique_rookies_data.groupby('PLAYER')['MIN'].mean().reset_index()
sophomore_eff = sophomore_data.groupby('PLAYER')['EFF'].mean().reset_index()
sophomore_mp = sophomore_data.groupby('PLAYER')['MIN'].mean().reset_index()

# Trim rookies_eff to contain only the names that are in sophomores_eff
trimmed_rookies_eff = rookie_eff[rookie_eff['PLAYER'].isin(unique_names)]
trimmed_rookies_mp = rookie_mp[rookie_mp['PLAYER'].isin(unique_names)]

# Assuming rookie_eff and sophomore_eff are pandas DataFrame objects
rookie_eff_values = trimmed_rookies_eff['EFF'].tolist()
rookie_mp_values = trimmed_rookies_mp['MIN'].tolist()
sophomore_eff_values = sophomore_eff['EFF'].tolist()
sophomore_mp_values = sophomore_mp['MIN'].tolist()

rookie_eff_per_min = []
sophomore_eff_per_min = []

for i in range(len(rookie_eff_values)):
  rookie_eff_per_min.append(rookie_eff_values[i] / rookie_mp_values[i])
  sophomore_eff_per_min.append(sophomore_eff_values[i] / sophomore_mp_values[i])

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_eff_per_min, sophomore_eff_per_min, color='blue')



# Set equal scale for both axes
plt.xlim(0.2, 1)
plt.ylim(0.2, 1)

# Add labels and title
plt.xlabel('Rookie EFF per minute', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore EFF per minute', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore EFF per minute', fontweight ='bold', fontsize = 18)



# Add a trend line
z = np.polyfit(rookie_eff_per_min, sophomore_eff_per_min, 1)
p = np.poly1d(z)
plt.plot(rookie_eff_per_min, p(rookie_eff_per_min), color='red', linestyle='-')
#plt.plot(rookie_eff_per_min, rookie_eff_per_min, color='green', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF per minute:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF per minute:", average2)

print("Average percentage increase EFF per minute:", 100 * (average2 - average1)/average1)

rookie_ppg_per_min = []
sophomore_ppg_per_min = []

for i in range(len(rookie_ppg_values)):
  rookie_ppg_per_min.append(rookie_ppg_values[i] / rookie_mp_values[i])
  sophomore_ppg_per_min.append(sophomore_ppg_values[i] / sophomore_mp_values[i])

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_ppg_per_min, sophomore_ppg_per_min, color='blue')



# Set equal scale for both axes
plt.xlim(0.2, 1)
plt.ylim(0.2, 1)

# Add labels and title
plt.xlabel('Rookie PPM', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore PPM', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore PPM', fontweight ='bold', fontsize = 18)



# Add a trend line
z = np.polyfit(rookie_ppg_per_min, sophomore_ppg_per_min, 1)
p = np.poly1d(z)
#plt.plot(rookie_eff, p(rookie_eff), color='red', linestyle='-')
plt.plot(rookie_ppg_per_min, p(rookie_ppg_per_min), color='red', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppg_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppg_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPM:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppg_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppg_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPM:", average2)

print("Average percentage increase PPM", 100 * (average2 - average1)/average1)

# set width of bar
barWidth = 0.25
fig = plt.subplots(figsize =(12, 8))

rookie_eff_per_min = [21.6/32.2, 18.5/31, 18.7/28.8, 19.1/35.4, 18.3/33.8]
sophomore_eff_per_min = [30.8/33.6, 18.4/32.6, 23.2/32.3, 18.7/34.8, 21.7/35]

# Set position of bar on X axis
br1 = np.arange(len(rookie_eff_per_min))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]

# Make the plot
plt.bar(br1, rookie_eff_per_min, color ='r', width = barWidth,
        edgecolor ='grey', label ='Rookie')
plt.bar(br2, sophomore_eff_per_min, color ='b', width = barWidth,
        edgecolor ='grey', label ='Sophomore')

# Adding Xticks
plt.xlabel('NBA ROTY Winners', fontweight ='bold', fontsize = 15)
plt.ylabel('EFF per minute', fontweight ='bold', fontsize = 15)
plt.xticks([r + barWidth for r in range(len(rookie_eff_per_min))],
        ['Luka Doncic', 'Ja Morant', 'Lamelo Ball', 'Scottie Barnes', 'Paolo Banchero'])
plt.title('NBA Players Rookie vs Sophomore EFF per minute for NBA ROTY Winners', fontweight ='bold', fontsize = 18)
plt.legend()
plt.show()
# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF per minute:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF per minute:", average2)

print("Average percentage increase EFF per minute:", 100 * (average2 - average1)/average1)

# set width of bar
barWidth = 0.25
fig = plt.subplots(figsize =(12, 8))

rookie_ppm = [21.2/32.2, 17.8/31, 15.7/28.8, 15.3/35.4, 20/33.8]
sophomore_ppm = [28.8/33.6, 19.1/32.6, 20.1/32.3, 15.3/34.8, 22.6/35]

# Set position of bar on X axis
br1 = np.arange(len(rookie_ppm))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]

# Make the plot
plt.bar(br1, rookie_ppm, color ='r', width = barWidth,
        edgecolor ='grey', label ='Rookie')
plt.bar(br2, sophomore_ppm, color ='b', width = barWidth,
        edgecolor ='grey', label ='Sophomore')

# Adding Xticks
plt.xlabel('NBA ROTY Winners', fontweight ='bold', fontsize = 15)
plt.ylabel('PPM', fontweight ='bold', fontsize = 15)
plt.xticks([r + barWidth for r in range(len(rookie_ppm))],
        ['Luka Doncic', 'Ja Morant', 'Lamelo Ball', 'Scottie Barnes', 'Paolo Banchero'])
plt.title('Comparison of Rookie and Sophomore PPM for NBA ROTY Winners', fontweight ='bold', fontsize = 18)
plt.legend()
plt.show()
# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppm)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppm)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPM:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppm)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppm)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPM:", average2)

print("Average percentage increase PPM:", 100 * (average2 - average1)/average1)

rookie_reb = unique_rookies_data.groupby('PLAYER')['REB'].mean().reset_index()
sophomore_reb = sophomore_data.groupby('PLAYER')['REB'].mean().reset_index()
trimmed_rookies_reb = rookie_reb[rookie_reb['PLAYER'].isin(unique_names)]
rookie_reb_values = trimmed_rookies_reb['REB'].tolist()
sophomore_reb_values = sophomore_reb['REB'].tolist()

rookie_ast = unique_rookies_data.groupby('PLAYER')['AST'].mean().reset_index()
sophomore_ast = sophomore_data.groupby('PLAYER')['AST'].mean().reset_index()
trimmed_rookies_ast = rookie_ast[rookie_ast['PLAYER'].isin(unique_names)]
rookie_ast_values = trimmed_rookies_ast['AST'].tolist()
sophomore_ast_values = sophomore_ast['AST'].tolist()

# Create a DataFrame with the data
df = pd.DataFrame({
    'Rookie PPG': rookie_ppg_values,
    'Rookie REB': rookie_reb_values,
    'Rookie AST': rookie_ast_values,
    'Rookie MP': rookie_mp_values,
    'Sophomore PPG': sophomore_ppg_values,
    'Sophomore REB': sophomore_reb_values,
    'Sophomore AST': sophomore_ast_values,
    'Sophomore MP': sophomore_mp_values,
})

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['Rookie PPG', 'Rookie REB','Rookie AST', 'Rookie MP']], df[['Sophomore PPG', 'Sophomore REB', 'Sophomore AST', 'Sophomore MP']], test_size=0.2)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print the results
print("MSE:", mse)
print("R2:", r2)

# Create a correlation matrix
corr_matrix = df.corr()

# Display the correlation matrix
print(corr_matrix)
#sns.title('Correlation Matrix of Rookie and Sophomore Stats')
# Create a heatmap of the correlation matrix
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True)
plt.show()

rookie_st = unique_rookies_data.groupby('PLAYER')['STL'].mean().reset_index()
sophomore_st = sophomore_data.groupby('PLAYER')['STL'].mean().reset_index()
trimmed_rookies_st = rookie_st[rookie_st['PLAYER'].isin(unique_names)]
rookie_st_values = trimmed_rookies_st['STL'].tolist()
sophomore_st_values = sophomore_st['STL'].tolist()

rookie_bl = unique_rookies_data.groupby('PLAYER')['BLK'].mean().reset_index()
sophomore_bl = sophomore_data.groupby('PLAYER')['BLK'].mean().reset_index()
trimmed_rookies_bl = rookie_bl[rookie_bl['PLAYER'].isin(unique_names)]
rookie_bl_values = trimmed_rookies_bl['BLK'].tolist()
sophomore_bl_values = sophomore_bl['BLK'].tolist()

rookie_tov = unique_rookies_data.groupby('PLAYER')['TOV'].mean().reset_index()
sophomore_tov = sophomore_data.groupby('PLAYER')['TOV'].mean().reset_index()
trimmed_rookies_tov = rookie_tov[rookie_tov['PLAYER'].isin(unique_names)]
rookie_tov_values = trimmed_rookies_tov['TOV'].tolist()
sophomore_tov_values = sophomore_tov['TOV'].tolist()

rookie_fg = unique_rookies_data.groupby('PLAYER')['FG_PCT'].mean().reset_index()
sophomore_fg = sophomore_data.groupby('PLAYER')['FG_PCT'].mean().reset_index()
trimmed_rookies_fg = rookie_fg[rookie_fg['PLAYER'].isin(unique_names)]
rookie_fg_values = trimmed_rookies_fg['FG_PCT'].tolist()
sophomore_fg_values = sophomore_fg['FG_PCT'].tolist()

rookie_fg3 = unique_rookies_data.groupby('PLAYER')['FG3_PCT'].mean().reset_index()
sophomore_fg3 = sophomore_data.groupby('PLAYER')['FG3_PCT'].mean().reset_index()
trimmed_rookies_fg3 = rookie_fg3[rookie_fg3['PLAYER'].isin(unique_names)]
rookie_fg3_values = trimmed_rookies_fg3['FG3_PCT'].tolist()
sophomore_fg3_values = sophomore_fg3['FG3_PCT'].tolist()

rookie_ft = unique_rookies_data.groupby('PLAYER')['FT_PCT'].mean().reset_index()
sophomore_ft = sophomore_data.groupby('PLAYER')['FT_PCT'].mean().reset_index()
trimmed_rookies_ft = rookie_ft[rookie_ft['PLAYER'].isin(unique_names)]
rookie_ft_values = trimmed_rookies_ft['FT_PCT'].tolist()
sophomore_ft_values = sophomore_ft['FT_PCT'].tolist()

# Create a DataFrame with the data
df = pd.DataFrame({
    'Rookie PPG': rookie_ppg_values,
    'Rookie REB': rookie_reb_values,
    'Rookie AST': rookie_ast_values,
    'Rookie STL': rookie_st_values,
    'Rookie BLK': rookie_bl_values,
    'Rookie TOV': rookie_tov_values,
    'Rookie FG_PCT': rookie_fg_values,
    'Rookie FG3_PCT': rookie_fg3_values,
    'Rookie FT_PCT': rookie_ft_values,
    'Rookie MP': rookie_mp_values,
    'Sophomore PPG': sophomore_ppg_values,
    'Sophomore REB': sophomore_reb_values,
    'Sophomore AST': sophomore_ast_values,
    'Sophomore STL': sophomore_st_values,
    'Sophomore BLK': sophomore_bl_values,
    'Sophomore TOV': sophomore_tov_values,
    'Sophomore FG_PCT': sophomore_fg_values,
    'Sophomore FG3_PCT': sophomore_fg3_values,
    'Sophomore FT_PCT': sophomore_ft_values,
    'Sophomore MP': sophomore_mp_values,
})
new_rookie_names = ["WEMBY", "CHET", "BRANDON MILLER"]
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['Rookie PPG', 'Rookie REB','Rookie AST', 'Rookie STL','Rookie BLK', 'Rookie TOV', 'Rookie FG_PCT', 'Rookie FG3_PCT','Rookie FT_PCT','Rookie MP']], df[['Sophomore PPG', 'Sophomore REB', 'Sophomore AST', 'Sophomore STL','Sophomore BLK', 'Sophomore TOV', 'Sophomore FG_PCT', 'Sophomore FG3_PCT', 'Sophomore FT_PCT','Sophomore MP']], test_size=0.1)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Create an array with new rookie data
new_rookie_data = np.array([[21.4, 10.6, 3.9, 1.2, 3.6, 3.7, 0.465, 0.325, 0.796, 29.7], [16.5, 7.9, 2.4, 0.6, 2.3, 1.6, 0.53, 0.37, 0.793, 29.4], [17.3, 4.3, 2.4, 0.9, 0.6, 1.8, 0.44, 0.373, 0.827, 32.2]])

# Predict the sophomore stats for the new rookie data
new_sophomore_data = model.predict(new_rookie_data)

"""
# Print the predicted sophomore stats
for name, stats in zip(new_rookie_names, new_sophomore_data):
    print(f"{name}: {stats}")

    # Plotting the results
fig, axs = plt.subplots(5, 2, figsize=(14, 10))
stat_labels = ['PPG', 'REB', 'AST', 'STL', 'BLK', 'TOV', 'FG', 'FG3', 'FT', 'MP']
colors = ['b', 'g', 'r']

for idx, stat in enumerate(stat_labels):
    ax = axs[idx // 2, idx % 2]
    ax.set_title(f'Predicted Sophomore {stat} for 2023-2024 ROTY Finalists')
    ax.set_xlabel('Player')
    ax.set_ylabel(stat)

    rookie_stat_values = [new_rookie_data[i][idx] for i in range(len(new_rookie_names))]
    sophomore_stat_values = [new_sophomore_data[i][idx] for i in range(len(new_rookie_names))]
    max_value = max(max(rookie_stat_values), max(sophomore_stat_values))
    ax.set_ylim(0, max_value + 6)  # Adjust y-axis to be slightly higher
    ax.bar(np.arange(len(new_rookie_names)) - 0.2, rookie_stat_values, width=0.4, label='Rookie', color=colors[0])
    ax.bar(np.arange(len(new_rookie_names)) + 0.2, sophomore_stat_values, width=0.4, label='Sophomore', color=colors[1])
    ax.set_xticks(np.arange(len(new_rookie_names)))
    ax.set_xticklabels(new_rookie_names)

    for i in range(len(new_rookie_names)):
        ax.text(i - 0.2, rookie_stat_values[i] + 0.1, f'{rookie_stat_values[i]:.1f}', ha='center', color='black')
        ax.text(i + 0.2, sophomore_stat_values[i] + 0.1, f'{sophomore_stat_values[i]:.1f}', ha='center', color='black')

    ax.legend()
"""
plt.tight_layout()
plt.show()

comparison_df = pd.DataFrame({
    'Player': new_rookie_names,
    'Rookie PPG': new_rookie_data[:, 0],
    'Rookie REB': new_rookie_data[:, 1],
    'Rookie AST': new_rookie_data[:, 2],
    'Rookie STL': new_rookie_data[:, 3],
    'Rookie BLK': new_rookie_data[:, 4],
    'Rookie TOV': new_rookie_data[:, 5],
    'Rookie FG_PCT': new_rookie_data[:, 6],
    'Rookie FG3_PCT': new_rookie_data[:, 7],
    'Rookie FT_PCT': new_rookie_data[:, 8],
    'Rookie MP': new_rookie_data[:, 9],
    'Sophomore PPG': new_sophomore_data[:, 0],
    'Sophomore REB': new_sophomore_data[:, 1],
    'Sophomore AST': new_sophomore_data[:, 2],
    'Sophomore STL': new_sophomore_data[:, 3],
    'Sophomore BLK': new_sophomore_data[:, 4],
    'Sophomore TOV': new_sophomore_data[:, 5],
    'Sophomore FG_PCT': new_sophomore_data[:, 6],
    'Sophomore FG3_PCT': new_sophomore_data[:, 7],
    'Sophomore FT_PCT': new_sophomore_data[:, 8],
    'Sophomore MP': new_sophomore_data[:, 9],
})

# Display the comparison table
print("Comparison of Rookie and Predicted Sophomore Stats:")
print(comparison_df)