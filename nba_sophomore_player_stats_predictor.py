# -*- coding: utf-8 -*-
"""NBA_sophomore_stats_predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12eJroWLwO1lQfs13DXyrRJ-nRXjUNj7B
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import requests
import time

# Years of NBA data to use for analysis
years = ['2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24']
# Create an empty dataframe that will be concatenated with the dataframes made for each year
df = pd.DataFrame(columns=['PLAYER', 'MIN_x', 'FG_PCT_x', 'FG3_PCT_x', 'FT_PCT_x', 'REB_x', 'AST_x', 'STL_x', 'BLK_x', 'TOV_x', 'PTS_x', 'EFF_x', 'MIN_y',
                           'FG_PCT_y', 'FG3_PCT_y', 'FT_PCT_y', 'REB_y', 'AST_y', 'STL_y', 'BLK_y', 'TOV_y', 'PTS_y', 'EFF_y', 'YEAR_x', 'YEAR_y'])
for i in range(len(years) - 1):
  # Create a dataframe for rookie data and a dataframe for sophomore data
  api_url_rookie = f'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=Rookies&Season={years[i]}&SeasonType=Regular%20Season&StatCategory=PTS'
  api_url = f'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=S&Season={years[i+1]}&SeasonType=Regular%20Season&StatCategory=PTS'
  r1 = requests.get(url=api_url).json()
  r2 = requests.get(url=api_url_rookie).json()
  table_head = r1['resultSet']['headers']
  df1 = pd.DataFrame(r1['resultSet']['rowSet'], columns=table_head)
  df2 = pd.DataFrame(r2['resultSet']['rowSet'], columns=table_head)
  # Filter both dataframes so that all players have 45+ games playefd
  df_filtered1 = df1[df1['GP'] >= 45]
  df_filtered2 = df2[df2['GP'] >= 45]
  # Merge rookie and sophomore dataframes
  dft = df_filtered2.merge(df_filtered1, on='PLAYER')
  #Get rid of specific columns
  dft = dft.drop(columns=['RANK_x', 'RANK_y','PLAYER_ID_x','PLAYER_ID_y','TEAM_ID_x','TEAM_ID_y','FGM_x','FGA_x','FGM_y','FGA_y','FG3M_x','FG3A_x','FG3M_y',
                          'FG3A_y','FTM_x','FTA_x','FTM_y','FTA_y','OREB_x', 'DREB_x','OREB_y', 'DREB_y', 'GP_x', 'GP_y', 'TEAM_x', 'TEAM_y'])
  # Create relevant columns for future use
  dft['YEAR_x'] = years[i]
  dft['YEAR_y'] = years[i+1]
  dft['PPM_x'] = dft['PTS_x'] / dft['MIN_x']
  dft['PPM_y'] = dft['PTS_y'] / dft['MIN_y']
  dft['EFFperMin_x'] = dft['EFF_x'] / dft['MIN_x']
  dft['EFFperMin_y'] = dft['EFF_y'] / dft['MIN_y']
  # Concatenate this dataframe with the main one
  df = pd.concat([df, dft], ignore_index=True)

df

# Create a dataframe of 2023-24 NBA Rookies
api_url_2023_24 = f'https://stats.nba.com/stats/leagueLeaders?LeagueID=00&PerMode=PerGame&Scope=Rookies&Season=2023-24&SeasonType=Regular%20Season&StatCategory=PTS'
r = requests.get(url=api_url_2023_24).json()
df_rookie2023 = pd.DataFrame(r['resultSet']['rowSet'], columns=table_head)
df_rookie2023 = df_rookie2023[df_rookie2023['GP'] >= 45]
df_rookie2023 = df_rookie2023.drop(columns=['RANK', 'PLAYER_ID', 'TEAM_ID','FGM','FGA','FG3M','FG3A','FTM','FTA','OREB', 'DREB', 'GP', 'TEAM'])
df_rookie2023

# Assuming rookie_ppg and sophomore_ppg are pandas DataFrame objects
rookie_ppg = df['PTS_x'].to_numpy()
sophomore_ppg = df['PTS_y'].to_numpy()

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_ppg, sophomore_ppg, color='blue')



# Set equal scale for both axes
plt.xlim(0, 25)
plt.ylim(0, 35)

# Add labels and title
plt.xlabel('Rookie PPG', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore PPG', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore PPG', fontweight ='bold', fontsize = 18)


# Add a trend line
z = np.polyfit(rookie_ppg, sophomore_ppg, 1)
p = np.poly1d(z)
plt.plot(rookie_ppg, p(rookie_ppg), color='red', linestyle='-')
#plt.plot(rookie_ppg_values, rookie_ppg_values, color='green', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppg)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppg)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPG:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppg)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppg)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPG:", average2)

print("Average percentage increase PPG:", 100 * (average2 - average1)/average1, "%")

#EFF is more comprehensive than PPG (it takes many other stats into account rather than just points)

rookie_eff = df['EFF_x'].to_numpy()
sophomore_eff = df['EFF_y'].to_numpy()


# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_eff, sophomore_eff, color='blue')



# Set equal scale for both axes
plt.xlim(0, 25)
plt.ylim(0, 35)

# Add labels and title
plt.xlabel('Rookie EFF', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore EFF', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore EFF', fontweight ='bold', fontsize = 18)


# Add a trend line
z = np.polyfit(rookie_eff, sophomore_eff, 1)
p = np.poly1d(z)
plt.plot(rookie_eff, p(rookie_eff), color='red', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF:", average2)

print("Average percentage increase EFF:", 100 * (average2 - average1)/average1, "%")

rookie_eff_per_min = df['EFFperMin_x'].to_numpy()
sophomore_eff_per_min = df['EFFperMin_y'].to_numpy()

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_eff_per_min, sophomore_eff_per_min, color='blue')



# Set equal scale for both axes
plt.xlim(0.2, 1)
plt.ylim(0.2, 1)

# Add labels and title
plt.xlabel('Rookie EFF per minute', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore EFF per minute', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore EFF per minute', fontweight ='bold', fontsize = 18)



# Add a trend line
z = np.polyfit(rookie_eff_per_min, sophomore_eff_per_min, 1)
p = np.poly1d(z)
plt.plot(rookie_eff_per_min, p(rookie_eff_per_min), color='red', linestyle='-')
#plt.plot(rookie_eff_per_min, rookie_eff_per_min, color='green', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF per minute:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF per minute:", average2)

print("Average percentage increase EFF per minute:", 100 * (average2 - average1)/average1, "%")

rookie_ppg_per_min = df['PPM_x'].to_numpy()
sophomore_ppg_per_min = df['PPM_y'].to_numpy()

# Create scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(rookie_ppg_per_min, sophomore_ppg_per_min, color='blue')



# Set equal scale for both axes
plt.xlim(0.2, 1)
plt.ylim(0.2, 1)

# Add labels and title
plt.xlabel('Rookie PPM', fontweight ='bold', fontsize = 15)
plt.ylabel('Sophomore PPM', fontweight ='bold', fontsize = 15)
plt.title('NBA Players Rookie vs Sophomore PPM', fontweight ='bold', fontsize = 18)



# Add a trend line
z = np.polyfit(rookie_ppg_per_min, sophomore_ppg_per_min, 1)
p = np.poly1d(z)
#plt.plot(rookie_eff, p(rookie_eff), color='red', linestyle='-')
plt.plot(rookie_ppg_per_min, p(rookie_ppg_per_min), color='red', linestyle='-')
#rookies AND sophomores must have played at least 45 games each season

# Display plot
plt.grid(True)
plt.tight_layout()
plt.show()

# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppg_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppg_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPM:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppg_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppg_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPM:", average2)

print("Average percentage increase PPM", 100 * (average2 - average1)/average1)

# set width of bar
barWidth = 0.25
fig = plt.subplots(figsize =(12, 8))
#below data is manually taken from the data frame for the past 5 ROTY winners
rookie_eff_per_min = [21.6/32.2, 18.5/31, 18.7/28.8, 19.1/35.4, 18.3/33.8]
sophomore_eff_per_min = [30.8/33.6, 18.4/32.6, 23.2/32.3, 18.7/34.8, 21.7/35]

# Set position of bar on X axis
br1 = np.arange(len(rookie_eff_per_min))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]

# Make the plot
plt.bar(br1, rookie_eff_per_min, color ='r', width = barWidth,
        edgecolor ='grey', label ='Rookie')
plt.bar(br2, sophomore_eff_per_min, color ='b', width = barWidth,
        edgecolor ='grey', label ='Sophomore')

# Adding Xticks
plt.xlabel('NBA ROTY Winners', fontweight ='bold', fontsize = 15)
plt.ylabel('EFF per minute', fontweight ='bold', fontsize = 15)
plt.xticks([r + barWidth for r in range(len(rookie_eff_per_min))],
        ['Luka Doncic', 'Ja Morant', 'Lamelo Ball', 'Scottie Barnes', 'Paolo Banchero'])
plt.title('NBA Players Rookie vs Sophomore EFF per minute for NBA ROTY Winners', fontweight ='bold', fontsize = 18)
plt.legend()
plt.show()
# Calculate the sum of all values in the array
total_sum1 = sum(rookie_eff_per_min)

# Calculate the total number of values in the array
total_values1 = len(rookie_eff_per_min)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie EFF per minute:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_eff_per_min)

# Calculate the total number of values in the array
total_values2 = len(sophomore_eff_per_min)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore EFF per minute:", average2)

print("Average percentage increase EFF per minute:", 100 * (average2 - average1)/average1)

# set width of bar
barWidth = 0.25
fig = plt.subplots(figsize =(12, 8))

#below data is manually taken from the data frame for the past 5 ROTY winners
rookie_ppm = [21.2/32.2, 17.8/31, 15.7/28.8, 15.3/35.4, 20/33.8]
sophomore_ppm = [28.8/33.6, 19.1/32.6, 20.1/32.3, 15.3/34.8, 22.6/35]

# Set position of bar on X axis
br1 = np.arange(len(rookie_ppm))
br2 = [x + barWidth for x in br1]
br3 = [x + barWidth for x in br2]

# Make the plot
plt.bar(br1, rookie_ppm, color ='r', width = barWidth,
        edgecolor ='grey', label ='Rookie')
plt.bar(br2, sophomore_ppm, color ='b', width = barWidth,
        edgecolor ='grey', label ='Sophomore')

# Adding Xticks
plt.xlabel('NBA ROTY Winners', fontweight ='bold', fontsize = 15)
plt.ylabel('PPM', fontweight ='bold', fontsize = 15)
plt.xticks([r + barWidth for r in range(len(rookie_ppm))],
        ['Luka Doncic', 'Ja Morant', 'Lamelo Ball', 'Scottie Barnes', 'Paolo Banchero'])
plt.title('Comparison of Rookie and Sophomore PPM for NBA ROTY Winners', fontweight ='bold', fontsize = 18)
plt.legend()
plt.show()
# Calculate the sum of all values in the array
total_sum1 = sum(rookie_ppm)

# Calculate the total number of values in the array
total_values1 = len(rookie_ppm)

# Calculate the average (mean)
average1 = total_sum1 / total_values1

print("Average rookie PPM:", average1)

# Calculate the sum of all values in the array
total_sum2 = sum(sophomore_ppm)

# Calculate the total number of values in the array
total_values2 = len(sophomore_ppm)

# Calculate the average (mean)
average2 = total_sum2 / total_values2

print("Average sophomore PPM:", average2)

print("Average percentage increase PPM:", 100 * (average2 - average1)/average1)

# Stores column values from the dataframe into arrays
rookie_reb = df['REB_x'].to_numpy()
sophomore_reb = df['REB_y'].to_numpy()
rookie_ast = df['AST_x'].to_numpy()
sophomore_ast = df['AST_y'].to_numpy()
rookie_mp = df['MIN_x'].to_numpy()
sophomore_mp = df['MIN_y'].to_numpy()

# Create a DataFrame used for the correlation matrix specifically
corr_df = pd.DataFrame({
    'Rookie PPG': rookie_ppg,
    'Rookie REB': rookie_reb,
    'Rookie AST': rookie_ast,
    'Rookie MP': rookie_mp,
    'Sophomore PPG': sophomore_ppg,
    'Sophomore REB': sophomore_reb,
    'Sophomore AST': sophomore_ast,
    'Sophomore MP': sophomore_mp,
})

# Create a correlation matrix
corr_matrix = corr_df.corr()

# Create a heatmap of the correlation matrix
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True)
plt.show()

# Stores column values from the dataframe into arrays

rookie_stl = rookie_reb = df['STL_x'].to_numpy()
sophomore_stl = df['STL_y'].to_numpy()

rookie_blk = df['BLK_x'].to_numpy()
sophomore_blk = df['BLK_y'].to_numpy()

rookie_tov = df['TOV_x'].to_numpy()
sophomore_tov = df['TOV_y'].to_numpy()

rookie_fgpct = df['FG_PCT_x'].to_numpy()
sophomore_fgpct = df['FG_PCT_y'].to_numpy()

rookie_fg3pct = df['FG3_PCT_x'].to_numpy()
sophomore_fg3pct = df['FG3_PCT_y'].to_numpy()

rookie_ftpct = df['FT_PCT_x'].to_numpy()
sophomore_ftpct = df['FT_PCT_y'].to_numpy()

new_rookie_names = ["WEMBY", "CHET", "BRANDON MILLER"]
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['PTS_x', 'REB_x','AST_x', 'STL_x','BLK_x', 'TOV_x', 'FG_PCT_x', 'FG3_PCT_x','FT_PCT_x','MIN_x']],
                                                    df[['PTS_y', 'REB_y','AST_y', 'STL_y','BLK_y', 'TOV_y', 'FG_PCT_y', 'FG3_PCT_y','FT_PCT_y','MIN_y']], test_size=0.2)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Create an array with new rookie data
new_rookie_data = np.array([[21.4, 10.6, 3.9, 1.2, 3.6, 3.7, 0.465, 0.325, 0.796, 29.7], [16.5, 7.9, 2.4, 0.6, 2.3, 1.6, 0.53, 0.37, 0.793, 29.4], [17.3, 4.3, 2.4, 0.9, 0.6, 1.8, 0.44, 0.373, 0.827, 32.2]])

# Predict the sophomore stats for the new rookie data
new_sophomore_data = model.predict(new_rookie_data)


#prints bar graphs for predicted statistics and rookie statistics
"""
# Print the predicted sophomore stats
for name, stats in zip(new_rookie_names, new_sophomore_data):
    print(f"{name}: {stats}")

    # Plotting the results
fig, axs = plt.subplots(5, 2, figsize=(14, 10))
stat_labels = ['PPG', 'REB', 'AST', 'STL', 'BLK', 'TOV', 'FG', 'FG3', 'FT', 'MP']
colors = ['b', 'g', 'r']

for idx, stat in enumerate(stat_labels):
    ax = axs[idx // 2, idx % 2]
    ax.set_title(f'Predicted Sophomore {stat} for 2023-2024 ROTY Finalists')
    ax.set_xlabel('Player')
    ax.set_ylabel(stat)

    rookie_stat_values = [new_rookie_data[i][idx] for i in range(len(new_rookie_names))]
    sophomore_stat_values = [new_sophomore_data[i][idx] for i in range(len(new_rookie_names))]
    max_value = max(max(rookie_stat_values), max(sophomore_stat_values))
    ax.set_ylim(0, max_value + 6)  # Adjust y-axis to be slightly higher
    ax.bar(np.arange(len(new_rookie_names)) - 0.2, rookie_stat_values, width=0.4, label='Rookie', color=colors[0])
    ax.bar(np.arange(len(new_rookie_names)) + 0.2, sophomore_stat_values, width=0.4, label='Sophomore', color=colors[1])
    ax.set_xticks(np.arange(len(new_rookie_names)))
    ax.set_xticklabels(new_rookie_names)

    for i in range(len(new_rookie_names)):
        ax.text(i - 0.2, rookie_stat_values[i] + 0.1, f'{rookie_stat_values[i]:.1f}', ha='center', color='black')
        ax.text(i + 0.2, sophomore_stat_values[i] + 0.1, f'{sophomore_stat_values[i]:.1f}', ha='center', color='black')

    ax.legend()
"""
# Create a dataframe to display input and output data
comparison_df = pd.DataFrame({
    'Player': new_rookie_names,
    'Rookie PPG': new_rookie_data[:, 0],
    'Rookie REB': new_rookie_data[:, 1],
    'Rookie AST': new_rookie_data[:, 2],
    'Rookie STL': new_rookie_data[:, 3],
    'Rookie BLK': new_rookie_data[:, 4],
    'Rookie TOV': new_rookie_data[:, 5],
    'Rookie FG_PCT': new_rookie_data[:, 6],
    'Rookie FG3_PCT': new_rookie_data[:, 7],
    'Rookie FT_PCT': new_rookie_data[:, 8],
    'Rookie MP': new_rookie_data[:, 9],
    'Sophomore PPG': new_sophomore_data[:, 0],
    'Sophomore REB': new_sophomore_data[:, 1],
    'Sophomore AST': new_sophomore_data[:, 2],
    'Sophomore STL': new_sophomore_data[:, 3],
    'Sophomore BLK': new_sophomore_data[:, 4],
    'Sophomore TOV': new_sophomore_data[:, 5],
    'Sophomore FG_PCT': new_sophomore_data[:, 6],
    'Sophomore FG3_PCT': new_sophomore_data[:, 7],
    'Sophomore FT_PCT': new_sophomore_data[:, 8],
    'Sophomore MP': new_sophomore_data[:, 9],
})

# Display the comparison table
print("Comparison of Rookie and Predicted Sophomore Stats:")
print(comparison_df)

#NOTE; predicted values change each time the program is run
